'use strict';

// ---- Desaf칤o de Programaci칩n ----

/*
    춰Sigamos con nuestra aplicaci칩n de apuestas de f칰tbol! Esta vez, 
    tenemos un mapa con un registro de los eventos que ocurrieron durante el partido. 
    Los valores son los eventos en s칤, y las claves son los minutos en los que ocurri칩 
    cada evento (un partido de f칰tbol tiene 90 minutos m치s alguna pr칩rroga).

    1. Crea un array 'eventos' con los diferentes eventos del partido que sucedieron 
       (sin duplicados)
    2. Una vez finalizado el partido, se descubre que la tarjeta amarilla del minuto 64 
       fue injusta. As칤 que elimina este evento del registro de eventos del partido.
    3. Imprime la siguiente cadena en la consola: 춺Ha ocurrido un evento, de media, 
       cada 9 minutos췉 (ten en cuenta que un partido tiene 90 minutos)
    4. Haz un bucle sobre los eventos y reg칤stralos en la consola, marcando si es en 
       la primera mitad o en la segunda mitad (despu칠s de 45 minutos) del partido, as칤:
       [PRIMER TIEMPO] 17: 丘쬂잺 GOL

*/

// Solucion

const gameEvents = new Map([
    [17, '丘쬂잺 GOAL'],
    [36, '游대 Substitution'],
    [47, '丘쬂잺 GOAL'],
    [61, '游대 Substitution'],
    [64, '游댰 Yellow card'],
    [69, '游댮 Red card'],
    [70, '游대 Substitution'],
    [72, '游대 Substitution'],
    [76, '丘쬂잺 GOAL'],
    [80, '丘쬂잺 GOAL'],
    [92, '游댰 Yellow card'],
]);

// ---- Tareas ----

// Tarea 1
const events = [...new Set(gameEvents.values())];
console.log(events);

// Tarea 2 
gameEvents.delete(64);

// Tarea 3
console.log(`An event happened, on average, every ${90 / gameEvents.size} minutes.`)

// Tarea 4
for (const [min, event] of gameEvents){
    const half = min <= 45 ? 'FIRST' : 'SECOND'
    console.log(`[${half} HALF] ${min}: ${event}`);
}